import {NextPage} from "next";
import Head from "next/head";
import {useState} from "react";
import Calendar from 'react-calendar'
import {RadioGroup} from '@headlessui/react'
import {CheckCircleIcon} from '@heroicons/react/20/solid'
import classNames from 'classnames'
import {gql} from "@apollo/client";
import client from '../lib/apollo-client';

// @ts-ignore
const CalendarComponent: NextPage = ({locations}) => {
    const [date, setDate] = useState(new Date());
    const [vehicles, setVehicles] = useState([])

    const fetchVehicleData = async () => {
        const {data} = await client.query({
            query: gql`
            query GetLocationAvailability {
              testdrive_vehicles(where: {in_service: {_eq: true}, location: {_eq: 1}}) {
                id
                vehicle_availability_relationship_array {
                  date
                  t8
                  t9
                  t10
                  t11
                  t12
                  t13
                  t14
                  t15
                  t16
                  t17
                  t18
                  t19
                  t20
                }
              }
            }
          `,
        });

        console.log(data.testdrive_vehicles)

        return setVehicles(data.testdrive_vehicles)
    }

    const handleClick = (event: { preventDefault: () => void; }) => {
        event.preventDefault()
        fetchVehicleData().then((data) => {})
    }

    return (
        <>
            <Head>
                <title>Calendar Component</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main>
                <div className={"bg-gray-50 mx-auto max-w-4xl my-6 py-4 rounded-lg"}>
                    <div className={"grid grid-cols-1 md:grid-cols-2 gap-6"}>
                        <div className={"grid grid-rows-1 gap-4"}>
                            <div className="flex justify-center pt-4 h-fit">
                                <Calendar onChange={setDate} value={date} className={"rounded-lg"} calendarType={"US"}
                                          minDate={new Date()}
                                          maxDate={new Date(new Date().getFullYear(), new Date().getMonth() + 1, new Date().getDate())}/>
                            </div>
                        </div>

                        <div className={"h-fit px-4"}>
                            <p className={"font-semibold text-center pt-2"}>{date.toLocaleString('default', {month: 'long'})} {date.getDate()}, {date.getFullYear()}</p>
                            {ListOfAvailableTimes(getSelectedDate(date))}
                        </div>
                    </div>
                </div>

                <div className={"mt-20 bg-red-200 py-4 mb-12"}>
                    <p className={"pb-4 text-center font-semibold"}>List of Locations</p>
                    {locations.map((location: { id: number; name: string; address1: string; city: string; state: string; zip: string; country: string; }) => (
                        <p key={location.id} className={"text-center pb-1"}>
                            {location.name}
                        </p>
                    ))}

                    <div className={"pt-16 text-center"}>
                        <button onClick={handleClick} className={"bg-white rounded-lg px-6 py-2 text-center"}>
                            FETCH DATA
                        </button>

                        <p className={"pt-4"}>Vehicle Data</p>
                    </div>
                    <p className={"pt-4 text-center"}>
                        {vehicles.map((vehicle: {
                            id: number;
                            vehicle_availability_relationship_array: {
                                date: string; t8: boolean; t9: boolean; t10: boolean; t11: boolean; t12: boolean; t13: boolean; t14: boolean; t15: boolean; t16: boolean; t17: boolean; t18: boolean; t19: boolean; t20: boolean;
                            }[];
                        }) => (
                            <>
                                <p>
                                    {vehicle.id}
                                </p>

                                {vehicle.vehicle_availability_relationship_array.map((value: {
                                    date: string; t8: boolean; t9: boolean; t10: boolean; t11: boolean; t12: boolean; t13: boolean; t14: boolean; t15: boolean; t16: boolean; t17: boolean; t18: boolean; t19: boolean; t20: boolean;
                                }) => (
                                    <>
                                        <p>
                                            {value.date}
                                        </p>
                                    </>
                                ))}
                            </>
                        ))}
                    </p>
                </div>
            </main>
        </>
    )
}

export default CalendarComponent

export async function getServerSideProps() {
    const { data } = await client.query({
        query: gql`
        query GetLocations {
          testdrive_locations {
            id
            name
            address1
            city
            state
            zip
            country
          }
        }
      `,
    });

    console.log(typeof data)

    return {
        props: {
            locations: data.testdrive_locations,
        },
    };
}

function getSelectedDate(selectedDate: Date) {
    const dateNum = selectedDate.getDate() < 10 ? `0${selectedDate.getDate()}` : selectedDate.getDate()
    const monthNum = selectedDate.getMonth()+1 < 10 ? `0${selectedDate.getMonth()+1}` : selectedDate.getMonth()+1

    return `${monthNum}/${dateNum}/${selectedDate.getFullYear()}`
}

function ListOfAvailableTimes(selectedDate: string) {
    const availability = [
        {
            "date": "09/19/2022",
            "times": ["9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM"]
        },
        {
            "date": "09/20/2022",
            "times": ["10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM"]
        },
        {
            "date": "09/21/2022",
            "times": []
        },
        {
            "date": "09/22/2022",
            "times": ["9:00 AM", "10:00 AM"]
        },
        {
            "date": "09/23/2022",
            "times": ["9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM"]
        },
        {
            "date": "09/24/2022",
            "times": ["9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM"]
        },
        {
            "date": "09/25/2022",
            "times": ["9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM"]
        },
        {
            "date": "09/26/2022",
            "times": ["9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM"]
        },
        {
            "date": "09/27/2022",
            "times": ["9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM"]
        },
        {
            "date": "09/28/2022",
            "times": ["9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM"]
        },
        {
            "date": "09/29/2022",
            "times": ["9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM"]
        },
        {
            "date": "09/30/2022",
            "times": ["9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM"]
        },
        {
            "date": "10/01/2022",
            "times": ["10:00 AM", "1:00 PM", "2:00 PM", "4:00 PM", "5:00 PM"]
        },
        {
            "date": "10/02/2022",
            "times": ["9:00 AM", "4:00 PM", "5:00 PM"]
        }
    ]
    const [selectedTime, setSelectedTime] = useState() // Leave empty so no cell is selected by default

    return (
        <>
            <form onSubmit={submitForm}>
                <input name={"selectedDate"} id={"selectedDate"} value={selectedDate} hidden readOnly={true} />
                <RadioGroup value={selectedTime} onChange={setSelectedTime} name={"selectedTime"} id={"selectedTime"}>
                    <div className="mt-4 grid grid-cols-1 gap-y-6 sm:grid-cols-3 sm:gap-x-4 pb-6">
                    {/* LOOPS THROUGH AVAILABILITY AND MAPS THEM TO THE CALENDAR VIEW */}
                    {availability.map((date) => (
                        date.date == selectedDate ?
                            date.times.length == 0 ?
                                <div key={1} className={"bg-gray-100 rounded-lg py-4 px-6 w-full flex justify-center mb-4 sm:col-span-3"}>
                                    <h1>No availability</h1>
                                </div>
                                :
                            date.times.map((time: string) => (
                                <RadioGroup.Option
                                    key={time}
                                    value={time}
                                    className={({ checked, active }) =>
                                        classNames(
                                            checked ? 'border-transparent' : 'border-gray-300',
                                            active ? 'border-blue-500 ring-2 ring-blue-500' : '',
                                            'relative flex cursor-pointer rounded-lg border bg-white p-4 shadow-sm focus:outline-none hover:bg-gray-50'
                                        )
                                    }
                                >
                                    {({ checked, active }) => (
                                        <>
                                            <span className="flex flex-1">
                                              <span className="flex flex-col">
                                                <RadioGroup.Label as="span" className="block text-sm font-medium text-gray-900">
                                                  {time}
                                                </RadioGroup.Label>
                                              </span>
                                            </span>
                                            <CheckCircleIcon
                                                className={classNames(!checked ? 'invisible' : '', 'h-5 w-5 text-blue-600')}
                                                aria-hidden="true"
                                            />
                                            <span
                                                className={classNames(
                                                    active ? 'border' : 'border-2',
                                                    checked ? 'border-blue-500' : 'border-transparent',
                                                    'pointer-events-none absolute -inset-px rounded-lg'
                                                )}
                                                aria-hidden="true"
                                            />
                                        </>
                                    )}
                                </RadioGroup.Option>
                            ))
                            :
                            <></>
                    ))}
                    </div>

                    {/* HIDES THE CONTINUE BUTTON IF NOT TIMES ARE AVAILABLE */}
                    {availability.map((date) => (
                        date.date == selectedDate ? date.times.length > 0 ?
                            <button className={"bg-blue-600 rounded-lg py-4 px-6 w-full flex justify-center text-white hover:bg-blue-700"} type={"submit"} key={1}>
                                <h1>Continue</h1>
                            </button> : <></> : <></>
                    ))}

                </RadioGroup>
            </form>
        </>
    )
}

const submitForm = async (event: any) => {
    event.preventDefault();
    alert(`Test Drive on ${event.target.selectedDate.value} at ${event.target.selectedTime.value} confirmed!`);
};