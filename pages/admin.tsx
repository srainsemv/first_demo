import {NextPage} from "next";
import Head from "next/head";
import {faker} from "@faker-js/faker";
import client from "../lib/apollo-client";
import {CreateVehicle, CreateAvailability, GetVehicleIDs} from "../graphql/scripts/CreateAvailability";
import {GET_LOCATIONS} from "../graphql/GetLocations";

const admin: NextPage = () => {
    return (
        <>
            <Head>
                <title>Calendar Component</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main>
                <div className={"bg-gray-50 mx-auto max-w-4xl my-6 py-4 rounded-lg text-center"}>
                    <button
                        className={"bg-blue-500 text-white hover:bg-blue-600 py-4 px-6 text-center"}
                        //onClick={createVehicles}
                    >
                        Create All Vehicles
                    </button>
                </div>

                <div className={"bg-gray-50 mx-auto max-w-4xl my-6 py-4 rounded-lg text-center"}>
                    <button
                        className={"bg-blue-500 text-white hover:bg-blue-600 py-4 px-6 text-center"}
                        onClick={createAvailability}
                    >
                        Generate Availability Vehicles
                    </button>
                </div>
            </main>
        </>
    )
}

export default admin

const createVehicles = async (event: any) => {
    event.preventDefault();
    const locationVehicleCount = [[1, 4], [2, 2], [3, 2], [4, 2], [5, 3], [6, 4], [7, 1]]

    locationVehicleCount.map(async (vehicle: number[]) => {
        let counter = 0;

        while (counter < vehicle[1]) {
            const vin = faker.finance.account(8)
            const color = faker.color.human()

            const {data} = await client.mutate({
                mutation: CreateVehicle(vin, "G3", color, vehicle[0], true)
            });

            counter++;
        }
    })
};

const createAvailability = async (event: any) => {
    event.preventDefault()
    const { data } = await client.query({
        query: GetVehicleIDs
    });

    const dates = ["09/28/2022", "09/29/2022", "09/30/2022"]

    dates.map(async (date: string) => {
        await data.testdrive_vehicles.map(async (vehicleInfo: { id: number }) => {
            console.log(`${date} - ${vehicleInfo.id}`)
            const {data} = await client.mutate({
                mutation: CreateAvailability(date, vehicleInfo.id)
            });
        })
    })
}